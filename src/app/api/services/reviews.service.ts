/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiReviewsIdDelete } from '../fn/reviews/api-reviews-id-delete';
import { ApiReviewsIdDelete$Params } from '../fn/reviews/api-reviews-id-delete';
import { apiReviewsPost } from '../fn/reviews/api-reviews-post';
import { ApiReviewsPost$Params } from '../fn/reviews/api-reviews-post';
import { apiReviewsProductProductIdGet } from '../fn/reviews/api-reviews-product-product-id-get';
import { ApiReviewsProductProductIdGet$Params } from '../fn/reviews/api-reviews-product-product-id-get';

@Injectable({ providedIn: 'root' })
export class ReviewsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiReviewsPost()` */
  static readonly ApiReviewsPostPath = '/api/Reviews';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewsPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiReviewsPost$Response(params?: ApiReviewsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiReviewsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewsPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiReviewsPost(params?: ApiReviewsPost$Params, context?: HttpContext): Observable<void> {
    return this.apiReviewsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiReviewsProductProductIdGet()` */
  static readonly ApiReviewsProductProductIdGetPath = '/api/Reviews/product/{productId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewsProductProductIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewsProductProductIdGet$Response(params: ApiReviewsProductProductIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiReviewsProductProductIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewsProductProductIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewsProductProductIdGet(params: ApiReviewsProductProductIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiReviewsProductProductIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiReviewsIdDelete()` */
  static readonly ApiReviewsIdDeletePath = '/api/Reviews/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewsIdDelete$Response(params: ApiReviewsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiReviewsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewsIdDelete(params: ApiReviewsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiReviewsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
