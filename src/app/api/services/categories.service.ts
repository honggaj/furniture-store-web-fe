/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiCategoriesGet } from '../fn/categories/api-categories-get';
import { ApiCategoriesGet$Params } from '../fn/categories/api-categories-get';
import { apiCategoriesIdDelete } from '../fn/categories/api-categories-id-delete';
import { ApiCategoriesIdDelete$Params } from '../fn/categories/api-categories-id-delete';
import { apiCategoriesIdGet } from '../fn/categories/api-categories-id-get';
import { ApiCategoriesIdGet$Params } from '../fn/categories/api-categories-id-get';
import { apiCategoriesIdPut } from '../fn/categories/api-categories-id-put';
import { ApiCategoriesIdPut$Params } from '../fn/categories/api-categories-id-put';
import { apiCategoriesPost } from '../fn/categories/api-categories-post';
import { ApiCategoriesPost$Params } from '../fn/categories/api-categories-post';

@Injectable({ providedIn: 'root' })
export class CategoriesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiCategoriesGet()` */
  static readonly ApiCategoriesGetPath = '/api/Categories';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoriesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoriesGet$Response(params?: ApiCategoriesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCategoriesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoriesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoriesGet(params?: ApiCategoriesGet$Params, context?: HttpContext): Observable<void> {
    return this.apiCategoriesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCategoriesPost()` */
  static readonly ApiCategoriesPostPath = '/api/Categories';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoriesPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoriesPost$Response(params?: ApiCategoriesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCategoriesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoriesPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoriesPost(params?: ApiCategoriesPost$Params, context?: HttpContext): Observable<void> {
    return this.apiCategoriesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCategoriesIdGet()` */
  static readonly ApiCategoriesIdGetPath = '/api/Categories/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoriesIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoriesIdGet$Response(params: ApiCategoriesIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCategoriesIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoriesIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoriesIdGet(params: ApiCategoriesIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiCategoriesIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCategoriesIdPut()` */
  static readonly ApiCategoriesIdPutPath = '/api/Categories/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoriesIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoriesIdPut$Response(params: ApiCategoriesIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCategoriesIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoriesIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoriesIdPut(params: ApiCategoriesIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiCategoriesIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCategoriesIdDelete()` */
  static readonly ApiCategoriesIdDeletePath = '/api/Categories/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoriesIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoriesIdDelete$Response(params: ApiCategoriesIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCategoriesIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoriesIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoriesIdDelete(params: ApiCategoriesIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiCategoriesIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
