/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiColorsGet } from '../fn/colors/api-colors-get';
import { ApiColorsGet$Params } from '../fn/colors/api-colors-get';
import { apiColorsIdDelete } from '../fn/colors/api-colors-id-delete';
import { ApiColorsIdDelete$Params } from '../fn/colors/api-colors-id-delete';
import { apiColorsIdGet } from '../fn/colors/api-colors-id-get';
import { ApiColorsIdGet$Params } from '../fn/colors/api-colors-id-get';
import { apiColorsIdPut } from '../fn/colors/api-colors-id-put';
import { ApiColorsIdPut$Params } from '../fn/colors/api-colors-id-put';
import { apiColorsPost } from '../fn/colors/api-colors-post';
import { ApiColorsPost$Params } from '../fn/colors/api-colors-post';

@Injectable({ providedIn: 'root' })
export class ColorsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiColorsGet()` */
  static readonly ApiColorsGetPath = '/api/Colors';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiColorsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColorsGet$Response(params?: ApiColorsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiColorsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiColorsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColorsGet(params?: ApiColorsGet$Params, context?: HttpContext): Observable<void> {
    return this.apiColorsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiColorsPost()` */
  static readonly ApiColorsPostPath = '/api/Colors';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiColorsPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiColorsPost$Response(params?: ApiColorsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiColorsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiColorsPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiColorsPost(params?: ApiColorsPost$Params, context?: HttpContext): Observable<void> {
    return this.apiColorsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiColorsIdGet()` */
  static readonly ApiColorsIdGetPath = '/api/Colors/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiColorsIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColorsIdGet$Response(params: ApiColorsIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiColorsIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiColorsIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColorsIdGet(params: ApiColorsIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiColorsIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiColorsIdPut()` */
  static readonly ApiColorsIdPutPath = '/api/Colors/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiColorsIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiColorsIdPut$Response(params: ApiColorsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiColorsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiColorsIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiColorsIdPut(params: ApiColorsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiColorsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiColorsIdDelete()` */
  static readonly ApiColorsIdDeletePath = '/api/Colors/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiColorsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColorsIdDelete$Response(params: ApiColorsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiColorsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiColorsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColorsIdDelete(params: ApiColorsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiColorsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
