/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiCartUserIdCartItemIdDelete } from '../fn/cart/api-cart-user-id-cart-item-id-delete';
import { ApiCartUserIdCartItemIdDelete$Params } from '../fn/cart/api-cart-user-id-cart-item-id-delete';
import { apiCartUserIdCartItemIdPut$Json } from '../fn/cart/api-cart-user-id-cart-item-id-put-json';
import { ApiCartUserIdCartItemIdPut$Json$Params } from '../fn/cart/api-cart-user-id-cart-item-id-put-json';
import { apiCartUserIdCartItemIdPut$Plain } from '../fn/cart/api-cart-user-id-cart-item-id-put-plain';
import { ApiCartUserIdCartItemIdPut$Plain$Params } from '../fn/cart/api-cart-user-id-cart-item-id-put-plain';
import { apiCartUserIdDelete } from '../fn/cart/api-cart-user-id-delete';
import { ApiCartUserIdDelete$Params } from '../fn/cart/api-cart-user-id-delete';
import { apiCartUserIdGet$Json } from '../fn/cart/api-cart-user-id-get-json';
import { ApiCartUserIdGet$Json$Params } from '../fn/cart/api-cart-user-id-get-json';
import { apiCartUserIdGet$Plain } from '../fn/cart/api-cart-user-id-get-plain';
import { ApiCartUserIdGet$Plain$Params } from '../fn/cart/api-cart-user-id-get-plain';
import { apiCartUserIdPost$Json } from '../fn/cart/api-cart-user-id-post-json';
import { ApiCartUserIdPost$Json$Params } from '../fn/cart/api-cart-user-id-post-json';
import { apiCartUserIdPost$Plain } from '../fn/cart/api-cart-user-id-post-plain';
import { ApiCartUserIdPost$Plain$Params } from '../fn/cart/api-cart-user-id-post-plain';
import { CartItemResponse } from '../models/cart-item-response';
import { CartResponse } from '../models/cart-response';

@Injectable({ providedIn: 'root' })
export class CartService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiCartUserIdGet()` */
  static readonly ApiCartUserIdGetPath = '/api/Cart/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCartUserIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCartUserIdGet$Plain$Response(params: ApiCartUserIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CartResponse>> {
    return apiCartUserIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCartUserIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCartUserIdGet$Plain(params: ApiCartUserIdGet$Plain$Params, context?: HttpContext): Observable<CartResponse> {
    return this.apiCartUserIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CartResponse>): CartResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCartUserIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCartUserIdGet$Json$Response(params: ApiCartUserIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CartResponse>> {
    return apiCartUserIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCartUserIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCartUserIdGet$Json(params: ApiCartUserIdGet$Json$Params, context?: HttpContext): Observable<CartResponse> {
    return this.apiCartUserIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CartResponse>): CartResponse => r.body)
    );
  }

  /** Path part for operation `apiCartUserIdPost()` */
  static readonly ApiCartUserIdPostPath = '/api/Cart/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCartUserIdPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCartUserIdPost$Plain$Response(params: ApiCartUserIdPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CartItemResponse>> {
    return apiCartUserIdPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCartUserIdPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCartUserIdPost$Plain(params: ApiCartUserIdPost$Plain$Params, context?: HttpContext): Observable<CartItemResponse> {
    return this.apiCartUserIdPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CartItemResponse>): CartItemResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCartUserIdPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCartUserIdPost$Json$Response(params: ApiCartUserIdPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CartItemResponse>> {
    return apiCartUserIdPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCartUserIdPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCartUserIdPost$Json(params: ApiCartUserIdPost$Json$Params, context?: HttpContext): Observable<CartItemResponse> {
    return this.apiCartUserIdPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CartItemResponse>): CartItemResponse => r.body)
    );
  }

  /** Path part for operation `apiCartUserIdDelete()` */
  static readonly ApiCartUserIdDeletePath = '/api/Cart/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCartUserIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCartUserIdDelete$Response(params: ApiCartUserIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCartUserIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCartUserIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCartUserIdDelete(params: ApiCartUserIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiCartUserIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCartUserIdCartItemIdPut()` */
  static readonly ApiCartUserIdCartItemIdPutPath = '/api/Cart/{userId}/{cartItemId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCartUserIdCartItemIdPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCartUserIdCartItemIdPut$Plain$Response(params: ApiCartUserIdCartItemIdPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CartItemResponse>> {
    return apiCartUserIdCartItemIdPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCartUserIdCartItemIdPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCartUserIdCartItemIdPut$Plain(params: ApiCartUserIdCartItemIdPut$Plain$Params, context?: HttpContext): Observable<CartItemResponse> {
    return this.apiCartUserIdCartItemIdPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CartItemResponse>): CartItemResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCartUserIdCartItemIdPut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCartUserIdCartItemIdPut$Json$Response(params: ApiCartUserIdCartItemIdPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CartItemResponse>> {
    return apiCartUserIdCartItemIdPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCartUserIdCartItemIdPut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCartUserIdCartItemIdPut$Json(params: ApiCartUserIdCartItemIdPut$Json$Params, context?: HttpContext): Observable<CartItemResponse> {
    return this.apiCartUserIdCartItemIdPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CartItemResponse>): CartItemResponse => r.body)
    );
  }

  /** Path part for operation `apiCartUserIdCartItemIdDelete()` */
  static readonly ApiCartUserIdCartItemIdDeletePath = '/api/Cart/{userId}/{cartItemId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCartUserIdCartItemIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCartUserIdCartItemIdDelete$Response(params: ApiCartUserIdCartItemIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCartUserIdCartItemIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCartUserIdCartItemIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCartUserIdCartItemIdDelete(params: ApiCartUserIdCartItemIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiCartUserIdCartItemIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
